<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>打卡小工具</title>
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            text-align: center; 
            margin: 0; 
            padding: 0; 
            background-color: #f0f2f5;
        }
        h2 {
            color: #333;
        }
        #controls {
            background-color: white;
            padding: 20px;
            margin: 20px auto;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            max-width: 600px;
        }
        textarea {
            width: 95%;
            height: 100px;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ccc;
            margin-bottom: 10px;
            font-size: 16px;
        }
        canvas {
            display: none; /* 初始隱藏 */
            background-color: #ffffff;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            margin: 0 auto;
        }
        .button-container {
            margin-top: 20px;
        }
        .button { 
            margin: 5px; 
            padding: 12px 24px; 
            background-color: #f4a83a; 
            color: white; 
            border: none; 
            border-radius: 5px; 
            cursor: pointer; 
            font-size: 16px;
            transition: background-color 0.3s ease, transform 0.1s ease;
        }
        .button:hover {
            background-color: #e0982c;
        }
        .button:active {
            transform: scale(0.98);
        }
        #undoButton {
            display: none; /* 初始隱藏 */
            background-color: #6c757d;
        }
        #undoButton:hover {
            background-color: #5a6268;
        }
    </style>
</head>
<body>
    <h2>打卡小工具</h2>
    <div id="controls">
        <h3>請輸入今日作業：</h3>
        <textarea id="taskInput" placeholder="請輸入作業名稱，每行一個..."></textarea><br>
        <button id="setupButton" class="button">確定</button>
    </div>
    
    <canvas id="checkinCanvas"></canvas>
    <div class="button-container">
        <button class="button" id="undoButton">還原上一步</button>
    </div>

    <script>
        // --- 1. DOM 元素 ---
        const taskInputElement = document.getElementById('taskInput');
        const setupButton = document.getElementById('setupButton');
        const controlsElement = document.getElementById('controls');
        const canvas = document.getElementById('checkinCanvas');
        const undoButton = document.getElementById('undoButton');
        const ctx = canvas.getContext('2d');

        // --- 2. 設定 (Configuration) ---
        const config = {
            box: { width: 80, height: 30 },
            padding: { horizontal: 10, vertical: 10 },
            margin: { top: 20, left: 20, right: 20 },
            font: { size: 14, family: 'Arial', color: 'white' },
            title: { height: 40, fontSize: 20, color: '#333' },
            boxColor: '#223e36',
        };

        const students = [
            "鄭宇翔", "吳信寬", "張雋堃", "黃名弘", "王聖澔", "王紹呈", "賴俞彣", "楊樂", "葉明宸", "謝秉橙", 
            "劉羽修", "張沅翔", "黃繹晟", "張子勤", "李昊宸", "郭品言", "賴柔伊", "蔡宣筑", "吳亭蓁", "袁語晨", "趙羿然",
            "吳紀緗", "王楀晴", "邱婕瑜", "王珮綺", "曾苡甄", "陳炘綺", "劉蕬綺"
        ];

        // --- 3. 狀態管理 (State Management) ---
        let tasks = [];
        let historyStack = [];

        function calculateLayout(taskNames, canvasWidth) {
            const layoutTasks = [];
            let currentY = config.margin.top;

            taskNames.forEach(name => {
                const task = {
                    name: name,
                    titleY: currentY + config.title.fontSize,
                    students: []
                };
                currentY += config.title.height;
                
                let currentX = config.margin.left;
                students.forEach(studentName => {
                    if (currentX + config.box.width + config.padding.horizontal > canvasWidth - config.margin.right) {
                        currentX = config.margin.left;
                        currentY += config.box.height + config.padding.vertical;
                    }

                    task.students.push({
                        name: studentName,
                        x: currentX,
                        y: currentY,
                        width: config.box.width,
                        height: config.box.height,
                        visible: true
                    });
                    
                    currentX += config.box.width + config.padding.horizontal;
                });
                layoutTasks.push(task);
                currentY += config.box.height + config.padding.vertical + config.title.height / 2;
            });

            return { layoutTasks, canvasHeight: currentY };
        }
        
        function draw() {
            ctx.textBaseline = 'middle';
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            tasks.forEach(task => {
                ctx.fillStyle = config.title.color;
                ctx.font = `bold ${config.title.fontSize}px ${config.font.family}`;
                ctx.textAlign = 'center';
                ctx.fillText(task.name, parseInt(canvas.style.width) / 2, task.titleY);

                task.students.forEach(student => {
                    if (student.visible) {
                        ctx.fillStyle = config.boxColor;
                        ctx.fillRect(student.x, student.y, student.width, student.height);

                        ctx.fillStyle = config.font.color;
                        ctx.font = `${config.font.size}px ${config.font.family}`;
                        ctx.textAlign = 'center';
                        ctx.fillText(student.name, student.x + student.width / 2, student.y + student.height / 2);
                    }
                });
            });
        }

        function getStudentAtPosition(mouseX, mouseY) {
            for (const task of tasks) {
                for (const student of task.students) {
                    if (student.visible && 
                        mouseX >= student.x && mouseX <= student.x + student.width &&
                        mouseY >= student.y && mouseY <= student.y + student.height) {
                        return student;
                    }
                }
            }
            return null;
        }

        // --- 4. 事件處理 (Event Handlers) ---

        function handleSetup() {
            const taskInput = taskInputElement.value.trim();
            if (taskInput === "") {
                alert("請輸入至少一個作業名稱！");
                return;
            }

            const taskNames = taskInput.split("\n").filter(t => t.trim() !== "");
            
            controlsElement.style.display = 'none';
            canvas.style.display = 'block';
            undoButton.style.display = 'inline-block';

            const logicalWidth = Math.min(window.innerWidth * 0.9, 800);
            const { layoutTasks, canvasHeight: logicalHeight } = calculateLayout(taskNames, logicalWidth);
            const dpr = window.devicePixelRatio || 1;

            canvas.width = logicalWidth * dpr;
            canvas.height = logicalHeight * dpr;
            canvas.style.width = logicalWidth + 'px';
            canvas.style.height = logicalHeight + 'px';
            ctx.scale(dpr, dpr);
            
            tasks = layoutTasks;
            historyStack = [];
            draw();
        }

        // 【修改】將 handleCanvasClick 重新命名並擴充功能
        function handleCanvasInteraction(event) {
            // 對於觸控事件，阻止其後續觸發 click 事件，避免重複執行
            event.preventDefault();
            
            const rect = canvas.getBoundingClientRect();
            let mouseX, mouseY;

            // 判斷是觸控事件還是滑鼠事件，並取得正確的座標
            if (event.touches && event.touches.length > 0) {
                // 這是觸控事件
                mouseX = event.touches[0].clientX - rect.left;
                mouseY = event.touches[0].clientY - rect.top;
            } else {
                // 這是滑鼠事件
                mouseX = event.clientX - rect.left;
                mouseY = event.clientY - rect.top;
            }

            const clickedStudent = getStudentAtPosition(mouseX, mouseY);
            
            if (clickedStudent) {
                clickedStudent.visible = false;
                historyStack.push(clickedStudent);
                draw();
            }
        }

        function handleUndo() {
            if (historyStack.length > 0) {
                const lastStudent = historyStack.pop();
                lastStudent.visible = true;
                draw();
            }
        }

        // --- 5. 事件監聽器 (Event Listeners) ---
        setupButton.addEventListener('click', handleSetup);

        // 【修改】同時監聽滑鼠點擊和手指觸控
        canvas.addEventListener('click', handleCanvasInteraction);
        canvas.addEventListener('touchstart', handleCanvasInteraction); // 【新增】為觸控裝置增加的監聽器

        undoButton.addEventListener('click', handleUndo);
        undoButton.addEventListener('touchstart', handleUndo); // 【新增】也為還原按鈕加上，提升觸控反應速度
    </script>
</body>
</html>
